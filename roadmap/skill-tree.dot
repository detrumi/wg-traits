digraph g {
graph [ rankdir = "LR" ];
node [ fontsize="16", shape = "ellipse" ];
edge [ ];
"align-rustc-predicate" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Align rustc predicates with chalk predicates</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">isolate Binder into a Forall goal</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">introduce Implication</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">introduce Forall goals with types</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"recursive-solver" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Experiment with a recursive chalk solver</td></tr>
    <tr><td bgcolor="cornsilk">☑️</td><td bgcolor="cornsilk" href="https://gist.github.com/nikomatsakis/bfbdbe588d6fc61ecb09e3b51847fb7c"><s><u>Write-up the idea that Niko had</u></s></td></tr>
    <tr><td bgcolor="cornsilk">⌚</td><td bgcolor="cornsilk"><i><font color="lightgrey">Build prototype and evaluate</font></i></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"impl-trait" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Model `impl Trait`</td></tr>
    <tr><td bgcolor="cornsilk">🛠️</td><td bgcolor="cornsilk">Preliminary model for opaque types where hidden types are known</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"rust-analyzer-integration" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Integrate with rust-analyzer</td></tr>
    <tr><td bgcolor="cornsilk" port="askfor_in">🙋</td><td fontcolor="red" bgcolor="cornsilk" port="askfor_out">Ensure that we never need to ask for impls of unknown types</td></tr>
    <tr><td bgcolor="cornsilk">⌚</td><td bgcolor="cornsilk"><i><font color="lightgrey">Deal with performance problems</font></i></td></tr>
    <tr><td bgcolor="cornsilk">⌚</td><td bgcolor="cornsilk"><i><font color="lightgrey">Deal with memory usage</font></i></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"syntactic-semantic-equality" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Separate syntactic equality from semantic equality</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"map-chalk-types-to-rustc-types" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Map chalk types to rustc types</td></tr>
    <tr><td bgcolor="cornsilk">☑️</td><td bgcolor="cornsilk"><s>Rename Projection to Alias</s></td></tr>
    <tr><td bgcolor="cornsilk">☑️</td><td bgcolor="cornsilk" href="https://github.com/rust-lang-nursery/chalk/issues/328"><s><u>Make ty intern method take &amp;self</u></s></td></tr>
    <tr><td bgcolor="cornsilk">🛠️</td><td bgcolor="cornsilk" href="https://github.com/rust-lang/chalk/issues/339"><u>Make ty data methods take &amp;self</u></td></tr>
    <tr><td bgcolor="cornsilk">🛠️</td><td bgcolor="cornsilk" href="https://github.com/rust-lang-nursery/chalk/issues/340"><u>Make other intern method take &amp;self</u></td></tr>
    <tr><td bgcolor="cornsilk">🛠️</td><td bgcolor="cornsilk" href="https://github.com/rust-lang/chalk/issues/341"><u>Make other data methods take &amp;self</u></td></tr>
    <tr><td bgcolor="cornsilk">⌚</td><td bgcolor="cornsilk"><i><font color="lightgrey">Align placeholders and ty::Param</font></i></td></tr>
    <tr><td bgcolor="cornsilk">☑️</td><td bgcolor="cornsilk"><s>Move Identifier to TypeFamily</s></td></tr>
    <tr><td bgcolor="cornsilk" port="debruijn_in">🛠️</td><td bgcolor="cornsilk" href="https://github.com/rust-lang/chalk/issues/334" port="debruijn_out"><u>Adapt rustc's debruijn index model</u></td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">Remove all vectors, boxes</td></tr>
    <tr><td bgcolor="cornsilk" port="visit_in">🙋</td><td fontcolor="red" bgcolor="cornsilk" href="https://github.com/rust-lang/chalk/issues/333" port="visit_out"><u>Introduce a `Visit` trait</u></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"rustc-integration-mvp" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Integrate chalk-solve into rustc</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">remove old chalk support</td></tr>
    <tr><td bgcolor="cornsilk">🙋</td><td fontcolor="red" bgcolor="cornsilk">create</td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"features" [
  label = <<table>
    <tr><td bgcolor="darkgoldenrod" port="all" colspan="2">Explore proposed language features</td></tr>
    <tr><td bgcolor="cornsilk">⌚</td><td bgcolor="cornsilk"><i><font color="lightgrey">implied bounds</font></i></td></tr>
  </table>>
  shape = "none"
  margin = 0
]
"library" [
  label = "Chalk usable as a standalone library for traits solving"
  shape = "note"
  margin = 0
  style = "filled"
  fillcolor = "darkgoldenrod"
]
"gats" [
  label = "Deploy GATs in Rust nightly"
  shape = "note"
  margin = 0
  style = "filled"
  fillcolor = "darkgoldenrod"
]
"impl-trait":all -> "rust-analyzer-integration":all;
"syntactic-semantic-equality":all -> "rust-analyzer-integration":askfor;
"map-chalk-types-to-rustc-types":debruijn_out -> "syntactic-semantic-equality":all;
"map-chalk-types-to-rustc-types":visit_out -> "syntactic-semantic-equality":all;
"map-chalk-types-to-rustc-types":all -> "rustc-integration-mvp":all;
"rustc-integration-mvp":all -> "features":all;
"rust-analyzer-integration":all -> "features":all;
"rustc-integration-mvp":all -> "library";
"rust-analyzer-integration":all -> "library";
"align-rustc-predicate":all -> "gats";
}
